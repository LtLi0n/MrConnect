// <auto-generated />
using System;
using Discord.Server;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Discord.Server.Migrations
{
    [DbContext(typeof(DiscordDbContext))]
    [Migration("20191104234928_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Discord.Shared.Fact", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedAt");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<ulong>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("facts");
                });

            modelBuilder.Entity("Discord.Shared.FactSuggestion", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AddedAt");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<ulong>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("facts_suggestions");
                });

            modelBuilder.Entity("Discord.Shared.Guild", b =>
                {
                    b.Property<ulong>("Id");

                    b.Property<DateTime>("AddedAt");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<ulong>("OwnerId");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("guilds");
                });

            modelBuilder.Entity("Discord.Shared.User", b =>
                {
                    b.Property<ulong>("Id");

                    b.Property<DateTime>("AddedAt");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("varchar(4)");

                    b.Property<DateTime>("LastUpdatedAt");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Discord.Shared.Fact", b =>
                {
                    b.HasOne("Discord.Shared.User", "User")
                        .WithMany("Facts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Discord.Shared.FactSuggestion", b =>
                {
                    b.HasOne("Discord.Shared.User", "User")
                        .WithMany("FactSuggestions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Discord.Shared.Guild", b =>
                {
                    b.HasOne("Discord.Shared.User", "Owner")
                        .WithMany("OwnedGuilds")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
